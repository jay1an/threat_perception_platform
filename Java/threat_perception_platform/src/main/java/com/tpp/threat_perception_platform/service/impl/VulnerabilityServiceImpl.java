package com.tpp.threat_perception_platform.service.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.tpp.threat_perception_platform.mapper.VulnerabilityMapper;
import com.tpp.threat_perception_platform.param.MyParam;
import com.tpp.threat_perception_platform.pojo.Vulnerability;
import com.tpp.threat_perception_platform.response.ResponseResult;
import com.tpp.threat_perception_platform.service.VulnerabilityService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.sql.Timestamp;
import java.util.List;

@Service
public class VulnerabilityServiceImpl implements VulnerabilityService {

    @Autowired
    private VulnerabilityMapper vulnerabilityMapper;

    @Override
    public ResponseResult<?> deleteByPrimaryKey(Integer id) {
        if(vulnerabilityMapper.deleteByPrimaryKey((long)id) == 1){
            return new ResponseResult<>(0,"删除成功");
        }else return new ResponseResult<>(1,"删除失败");
    }

    @Override
    public ResponseResult<?> save(Vulnerability vulnerability) {
        // 查询是否有相同的数据
        Vulnerability vulnerabilityDB = vulnerabilityMapper.selectByName(vulnerability.getName());
        if(vulnerabilityDB == null){
            // 没有相同的数据，插入
            vulnerability.setCreateTime(new Timestamp(System.currentTimeMillis()));
            if(vulnerabilityMapper.insert(vulnerability) == 1){
                return new ResponseResult<>(0,"插入成功");
            }else return new ResponseResult<>(1,"插入失败");
        }else
            return new ResponseResult<>(1,"该漏洞已存在");
    }

    @Override
    public ResponseResult<?> list(MyParam param) {
        PageHelper.startPage(param.getPage(),param.getLimit());
        List<Vulnerability> vulnerabilities = vulnerabilityMapper.findAll(param);
        PageInfo<Vulnerability> pageInfo = new PageInfo<>(vulnerabilities);
        return new ResponseResult<>(pageInfo.getTotal(),vulnerabilities);
    }

    @Override
    public ResponseResult<?> deleteByIds(Integer[] ids) {
        if(vulnerabilityMapper.deleteByIds(ids) == ids.length)
            return new ResponseResult<>(0,"删除成功");
        return new ResponseResult<>(1,"删除失败");
    }

    @Override
    public ResponseResult<?> edit(Vulnerability vulnerability) {
        Vulnerability vulnerabilityDB = vulnerabilityMapper.selectByPrimaryKey((long)vulnerability.getId());
        vulnerability.setId(vulnerabilityDB.getId());
        if(vulnerabilityMapper.updateByPrimaryKeySelective(vulnerability) == 1)
            return new ResponseResult<>(0,"修改成功");
        return new ResponseResult<>(1,"修改失败");
    }

    @Override
    public List<Vulnerability> list2() {
        return vulnerabilityMapper.findAll2();
    }

}
